										maven + hikariCP + Hibernate使用教程
环境: 
	Maven 3.5.0
   	jdk 1.8.0_92 
   	hikariCP 2.4.13
	hibernate 4.3.11.Final  
   	eclipse Mars.2 Release (4.5.2)以上
   	apache-tomcat-8.0.46
   	mariadb数据库
  
hibernate是orm框架,是持久化层框架,专门与数据库打交道. 它将数据库操作转化为对象之间的操作. 那么如何搭建表与对象的桥梁呢? 就是
在应用程序启动时,加载配置文件,告诉框架表与对象的关系. 具体说来,
第一, 每一个表对应一个实体类,通过一个映射文件描述它们之间的关系;
第二, 映射文件中,通过对象与对象的关联来反映了表与表的关联,开发者只需要配好对象间的映射关系;
第三, 映射文件是根据什么来配置对象与对象的关联呢? 一般通过 主外键以及数据库中建立的关系表;
比如在一对一中,在双方的类中添加对方的实体对象,一方的主键通过外键生成,即在映射文件中配置id元素,仿照一下
Person与Card
<id name="cid" type="java.lang.Long">
            <column name="CID" />
            <generator class="foreign">
            	<param name="property">person</param>
            </generator>
        </id>

下面通过一个demo来讲解:
   	
1. 首先, eclipse创建一个maven项目
2. 配置pom,并在src/main/resources/下配置hibernate.cfg.xml,编写数据库连接信息的配置,以及加载对象与表的映射文件
3. 创建一个test database,创建CATERIES, PRODUCTS, SUPPLIERS, PRODUCT_SUPPLY表
4. 在src/main/resources/下建立entity_mappings文件夹,在entity_mappings里
编写对象与表的映射文件: 类名.hbm.xml ,如Products.hbm.xml. 
5. 在映射文件中配置对象与表的关系,及对象与对象的映射关系. 例如: CATERIES与PRODUCTS一对多映射关系, 
PRODUCTS与SUPPLIERS多对多映射关系,其中PRODUCT_SUPPLY是关系表,不需要单独另建配置文件


######################################对象状态与加载策略#####################################

第一点： Hibernate 连接数据库流程
//1.加载配置文件,获得连接对象工厂
StandardServiceRegistryBuilder registryBuilder = new StandardServiceRegistryBuilder();
Configuration config = new Configuration();
URL url = SessionFactoryUtil.class.getClassLoader().getResource("hibernate.cfg.xml");
config.configure(url);
registryBuilder.applySettings(config.getProperties());
serviceRegistry = registryBuilder.build();
sessionFactory = config.buildSessionFactory(serviceRegistry);

//2.获得一个连接
Session session = sessionFactory.openSession();

//3.开启一个事务
Transaction trans = session.beginTransaction();
		
//4.执行增删改查
调用session	save/update/delete／createQuery/	createCriteria等等方法，
如果只执行查询可以不开启事务；

//5.提交事务，会将session中所有持久化对象改动都写入数据库
trans.commit();	

//6.关闭连接
session.close();


第二点： 总结session 的get/load 方法
1，get()方法和load()方法基本上是相同的,都是从数据库中取数据，但有两点不同：
    A，当我们从数据库中取的数据不存在时，get()方法会返回一个null
	   而load()方法则会直接抛异常（则报错）
    B，当我们取到数据后，get()方法会将所有的数据都取出来，(即时加载)
 	   而load()方法则只会把主键取出来 (称为延时加载/懒加载--lazyinit)
 	   所以当session关闭后，get方法获得的对象可以取得该对象除主键之外的属性,
 	   load方法只能得到主键;
2，update()方法和merge()方法也基本上是相同的，都是更新数据,但也还是有不同的：
     当有两个相同的对象同时处于持久态的时候，我们对其中的某一对象进行update的时候，
	   update()方法会报错误
	   而merge()方法则会将两个合并为一个，当只有一个的话merge()方法也会去数据库中查一个相同的出来再进行合并
3，saveOrUpdate()的意思是：当数据库中存在该主键就update,否则就save


第三点： 对象三种状态
自由态（新建态）：在数据库中是不会存在该对象的，当我们使用session.delete()方法可使对象变为自由态
持久态（托管态）：则数据是处于了持久的内存中的，数据库中有数据的，当我们改变处于持久态的对象时，数据库中的也会改变
		  可以变为持久态的方法是：get(),load(),save(),update(),saveOrUpdate(),merge(),(一级缓存)
游离态：数据库中有可能存在的数据，通过session的close(),clear(),evict(Object)三个方法可以将一个持久态的对象变为一个
	游离态的对象

1. session关联对象 可以类似理解为 session的内存空间持有了该对象的引用;
在这里，所谓的同一个对象是指两个对象都是同一个主键id，对应数据库同一条记录;
2. 当对象是通过session得到的，session就关联了这个对象，这个对象就处于持久态;
3. 当session对一个新建态对象(比如，new Cateries())操作时，会先关联这个对象，使其处于持久态,但如果
session已经关联了同一个对象,会报错(比如，先查询所有，在添加已存在的主键ID对象);
例如
Cateries Cateries1=new Cateries("洗衣机","");
Cateries1.setCateryId(4);
Cateries c=(Cateries) session.get(Cateries.class, 4);
session.save(Cateries1);

报错org.hibernate.NonUniqueObjectException: A different object with the same identifier value was 
already associated with the session : [com.yunfeic.test.entity.Cateries#4]


4. 持久态的对象与数据库记录对应，已经处于持久态的对象不允许改主键，否则hibernate框架不知你到底要干嘛, 报错，例如
Cateries cateries = (Cateries) session.get(Cateries.class, 3);
cateries.setCateryId(2);

报错
org.hibernate.HibernateException: identifier of an instance of com.yunfeic.test.entity.Cateries was altered from 3 to 2


5. 提交事务，会将session中所有持久化对象改动都写入数据库，非持久化状态的对象的改动不会写入数据库;

6. 重复保存持久态的对象,只会执行一次插入语句;


第四点:
当我们使用批量插入到数据库中的时候：我们要通过把对象放到游离状态来完成，因为持久状态的内存并不大，当数据过多会造成内存溢出
例如：
	for(int i=0;i<10000000;i++){
		if(i%50==0){
			session.clear(); //当有了50个就放入游离状态
		}
		session.save(object);
	}


################################主键策略###################################
identity:
适合数据库自动增长的主键
不适合oracle数据库

native:
是告诉框架由数据库自己搞定
如果操作的是oracle数据库
那么会自动去找一个叫hibernate_sequence的序列

increment:(由框架生成.性能，并发)
是由框架先去查询数据库的表的最大值
然后再自动生成主键


sequence:
oracle数据库独有的生成方式
生成的也是一个数字


assigned:
是由程序员自己手动指定
适合任意类型的主键


uuid:(强烈推荐)
是由框架自动根据mac地址与时间点生成
一个32位的字符串，作为主键


foreign:(表示表的主键由外部给予)
一般来说我们采用的一对一的方式会用该配置
一对一：
1：在双方的类中添加对方的实体对象
2：在配置中采用<one-to-one>来配置该添加的属性

一对一采用的加载策略是即时加载






************* 以下是"类名.hbm.xml"文件中的配置讲解与案例 **********************

实体类类名对应表名;
实体类的属性对应表中字段;
实体类中必须定义空的构造方法,无参数,无方法体;
例如实体类 Products.java , 映射文件 Products.hbm.xml
实体类 Cateries.java , 映射文件 Cateries.hbm.xml



Hibernate映射关系有 一对一, 一对多, 多对一, 多对多, 以及组合关系(一个对象有其他几个对象组合而成,比如一个汽车有多个零部件拼装成的), 继承关系;
最重要是前四种;

*************************************** 第一种. one-to-one ***************************************
例如下方实体类 Person.java , 映射文件 Person.hbm.xml
实体类 Card.java , 映射文件 Card.hbm.xml
1：在双方的类中添加对方的实体对象,一方的主键通过外键生成,外键从代表另一方对象的属性中获得;
2：在配置中采用<one-to-one>来配置该添加的属性;
在映射文件Person.hbm.xml中
"<one-to-one name="c" class="com.yunfeic.test.entity.Card" cascade="all"></one-to-one>"含义
是: 
"name"代表映射的另一方(这里指Card)在该类中对应动属性名(这里指属性c);

"class"代表映射的另一方的全名;

"cascade"代表级联,一个对象动另一个也会跟着动,操作关联. 
cascade配置在哪个映射文件(这里指Person.hbm.xml)就有该映射文件对应的对象级联另一个对象(这里指Card).
有值'all'(任何情况都进行关联操作),
'delete'(执行删除时进行关联操作),
'save-update'(执行save/update/saveOrUpdate时进行关联操作),
'none'所有情况下均不进行关联操作,这是默认值;
###################################################################################
create table person(
pid int primary key,
pname varchar(50) not null
)default charset=utf8;

public class Person {
	private int pid;
	private String pname;
	private Card c;

	public Person() {
	}

	....
	相关get set constructor方法
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
  "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
 <hibernate-mapping>
 <class name="com.yunfeic.test.entity.Person" table="person">
 <id name="pid" type="java.lang.Integer">
 <column name="pid"/>
 <generator class="assigned"/>
 </id>
 <property name="pname" type="java.lang.String">
 <column name="pname"/>
 </property>
 <one-to-one name="c" class="com.yunfeic.test.entity.Card" cascade="all"></one-to-one>
 </class>
 </hibernate-mapping>

------------------------------------------------------------------------------------------------------------

create table card(
cid int primary key,
cname varchar(50) not null
)default charset=utf8;

public class Card {
	private int cid;
	private String cname;
	private Person p;
	public Card() {}

	....
	相关get set constructor方法
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
 "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
	<class name="com.yunfeic.test.entity.Card" table="card">
		<id name="cid" type="java.lang.Integer" column="cid">
			<generator class="foreign">
				<param name="property">p</param>
			</generator>
		</id>
		<property name="cname" type="java.lang.String">
			<column name="cname"/>
		</property>
		
		<one-to-one name="p" class="com.yunfeic.test.entity.Person">	</one-to-one>
	</class>
</hibernate-mapping>
###################################################################################
第一点: 同时添加Person和Card,保存Person就会保存Card
Person p=new Person(0, "张三");
Card c=new Card("4320088979323");
//为Person设置Card,使其关联Card,在保存Person时才会Card
p.setC(c);
//为Card设置Person,使其在被级联保存时,从属性p中获得需要插入数据库的主键ID,否则无法插入
c.setP(p);
session.save(p);

第二点: 同时删除Person和Card,删除Person就会删除Card
Person person = (Person)session.get(Person.class, 0);
session.delete(person);

第三点: 给已存在的主键id的人添加一张卡
//假设数据库已存在主键1，给1号id的人添加一张卡
Person person = (Person)session.get(Person.class, 1);
Card c=new Card("4320088979323");
person.setC(c);
c.setP(person);
session.save(person);

第四点: 只删除某个人的卡,要让session中的人不认识卡就可以删除Card与Person要主动互相解除关联,否则报错
	  org.hibernate.ObjectDeletedException: deleted object would be re-saved by cascade
	 报错原因是session中已关联Person与Card，如果不互相解除关联，Person会重新级联保存Card,而这时又要删除Card,冲突
//假设数据库已存在主键1
Person person = (Person)session.get(Person.class, 1);
Card c=person.getC();
//Card要主动与Person解除关联
c.setP(null);
//Person要主动与Card解除关联
person.setC(null);
session.delete(c);	 
	 

*************************************** 第二/三种. one-to-many／many-to-one ***************************************
例如下方实体类 Person.java , 映射文件 Person.hbm.xml
实体类 Card.java , 映射文件 Card.hbm.xml
多方类映射的表要有一个column指向一方类映射的表的主键;
多方java类中去掉指向一方的属性id,也就是外键,改为private 一方类名 变量名;

一对多（主外键关系）(这里以下面的例子为例(Cateries对应多个Products))
1.一对多在多方的类中配置一个一方的对象
Products类中添加属性: private Cateries catery

2.将原代表一方的id删除
/*
	注释属性 cateryId,使用 private Cateries catery 替代
	cateryId 对应数据库字段 catery_id 
*/

3.在多方的配置中配置many-to-one标签,name指多方的类中那个可以得到一方的类对象的属性名,
class指多方类到底要对应哪个一方的类的类全名, column指name映射多方类对应的表的哪个表字段
<!-- 类别与产品 一对多 -->
<many-to-one name="catery" class="com.yunfeic.test.entity.Cateries" column="catery_id">
</many-to-one>


4.在一方的类中配置一个对方的Set集合
private Set<Products> pros=new HashSet<Products>();

5.在一方的类配置中配置
<set table="关系表">
	<key column="在关系表中哪个字段能够找到自己" cascade="all" inverse="true"/>
	<one-to-many class=""/>
</set>

 <!-- 类别与产品 一对多 类别来级联, 产品来维护关系-->
 <set name="pros" table="products" cascade="all" inverse="true">
     <key column="catery_id"></key>
     <one-to-many class="com.yunfeic.test.entity.Products"/>
 </set>

6.关于cascade与inverse
cascade是表示级联操作数据, inverse是表示哪个对象维护关系列，是否反转这个规则;
cascade配在哪个对象的配置文件中，哪个对象就获得级联主导权;
inverse只对set+one-to-many(或many-to-many)有效;
inverse配在哪个对象的配置文件中,true则这个对象不维护关系，它对应的一方对象来维护关系;
inverse不进行配置,则级联主导权方会来维护关系,会导致n+1问题(比如,保存1个类别与n个产品,按道理会有n+1个插入语句,结果多了n个update语句);

7. 关于set配置中的lazy,lazy默认true,其他值false表示即时加载,extra表示即时加载但可以拿到关联对象的集合的size;
lazy指是否延迟加载目标对象的所有关联对象,默认延迟加载,除非把lazy设为false,才会即时加载所有关联对象,否则只会有所有关联对象主键ID;
lazy配在哪个对象的映射文件,目标对象就是谁,而关联对象就是指lazy所在的元素标签对应的对象,如下
<many-to-one name="catery" class="com.yunfeic.test.entity.Cateries"
			column="catery_id"  lazy="false"></many-to-one>
###################################################################################
create table PRODUCTS (
   PRODUCT_NO           varchar(50)          not null,
   CATERY_ID          int               not null,
   PRODUCT_NAME         varchar(300)         not null,
   PRODUCT_PRICE        float                not null,
   PHOTO_PATH           varchar(100)         null,
   PRODUCT_DESCN        varchar(2000)        null,
   constraint PK_PRODUCTS primary key  (PRODUCT_NO)
)default charset=utf8;


public class Products {
	private String productNo;
	private String productName;
	private float productPrice;
	private String photoPath;
	private String productDescn;
	
	//private int cateryId; 
	private Cateries catery; 
	/*
	注释属性 cateryId,使用 private Cateries catery 替代
	cateryId 对应字段 catery_id ,
	*/
	
	private Set<Suppliers> supplys=new HashSet<Suppliers>();
	
	public Products(){}
	....
	相关get set constructor方法
}


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
  "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
	<class name="com.yunfeic.test.entity.Products" table="products">
		<id name="productNo" type="java.lang.String">
			<column name="product_no" />
			<generator class="uuid" />
		</id>
		<property name="productName" type="java.lang.String">
			<column name="product_name" />
		</property>
		<property name="productPrice" type="java.lang.Float">
			<column name="product_price" />
		</property>
		<property name="photoPath" type="java.lang.String">
			<column name="photo_path" />
		</property>
		<property name="productDescn" type="java.lang.String">
			<column name="product_descn" />
		</property>
		
		<!-- 类别与产品 一对多 -->
		<many-to-one name="catery" class="com.yunfeic.test.entity.Cateries"
			column="catery_id"></many-to-one>
		
		<!-- 产品与供应商 多对多 -->
		<set name="supplys" table="product_supply">
		    <key column="product_no"/>
		    <many-to-many class="com.yunfeic.test.entity.Suppliers" column="supply_no"/>
		</set>
		
	</class>
</hibernate-mapping>

------------------------------------------------------------------------------------------------------------ 

create table CATERIES (
   CATERY_ID int,
   CATERY_NAME varchar(100) not null,
   CATERY_DESCN varchar(500),
   constraint PK_CATERIES primary key  (CATERY_ID)
)default charset=utf8;


 public class Cateries {
	private int cateryId;
	private String cateryName;
	private String cateryDescn;
	
	private Set<Products> pros=new HashSet<Products>();
	
	public Cateries() {}
	
	....
	相关get set constructor方法
	
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
  "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
 <hibernate-mapping>
 <class name="com.yunfeic.test.entity.Cateries" table="cateries">
 <id name="cateryId" type="java.lang.Integer">
 <column name="catery_id"/>
 <generator class="increment"/>
 </id>
 <property name="cateryName" type="java.lang.String">
 <column name="catery_name"/>
 </property>
 <property name="cateryDescn" type="java.lang.String" column="catery_descn"></property>
 <!-- 类别与产品 一对多 类别来级联, 产品来维护关系-->
 <set name="pros" table="products" cascade="all" inverse="true">
     <key column="catery_id"></key>
     <one-to-many class="com.yunfeic.test.entity.Products"/>
 </set>
 </class>
 </hibernate-mapping>
###################################################################################
第一案例:保存1个类别与2个产品,互相设置关系
Cateries c=new Cateries(4, "军火", "枪炮...");
Products p1=new Products("枪", 3242, "", "");
Products p2=new Products("大炮", 32742, "", "");
c.getPros().add(p1);
c.getPros().add(p2);
//p1.setCatery(c);
//p2.setCatery(c);
如果产品不添加类别，外键会为null,如果数据库表products的外键设置了非空约束,则报错,所以一定要互相设置关系

第二案例:删除类别或产品，首先先查出类别或产品对象
Products p=(Products) session.get(Products.class, "0011");
session.delete(p);

第三案例:为2号类别添加2个产品
Cateries cate=(Cateries) session.get(Cateries.class, 2);
Products p1=new Products("苹果电脑", 5242, "", "");
Products p2=new Products("联想电脑", 22742, "", "");
p1.setCatery(cate);
p2.setCatery(cate);
session.save(p1);
session.save(p2);
***************************************** 第四种. many-to-many *********************************************
这里以SUPPLIERS与Products为例
1. 多对多与一对一类似,但数据库中要建立一张中间的关系表(这里是PRODUCT_SUPPLY表);
2. 在双方的类中配置都一个对方的Set集合;
SUPPLIERS.java中 private Set<Products> pros=new HashSet<Products>();
Products.java中  private Set<Suppliers> supplys=new HashSet<Suppliers>();
3. 在双方的类配置文件中都配置关联关系,配置标签含义同one-to-many,通常一方主导级联, 一方维护关系
在Suppliers.hbm.xml中配置
<!-- 供应商与产品 多对多 供应商来级联, 产品来维护关系-->
<set name="pros" table="product_supply" cascade="save-update" inverse="true">
	<key column="supply_no"></key>
	<many-to-many class="com.yunfeic.test.entity.Products"
		column="product_no" />
</set>

在Products.hbm.xml中配置
<!-- 产品与供应商 多对多 -->
<set name="supplys" table="product_supply">
	<key column="product_no"/>
	<many-to-many class="com.yunfeic.test.entity.Suppliers" column="supply_no"/>
</set>

####################################################################################
 create table PRODUCT_SUPPLY (
   SUPPLY_NO            varchar(50)          null,
   PRODUCT_NO           varchar(50)          null
)default charset=utf8;

create table SUPPLIERS (
   SUPPLY_NO            varchar(50)          not null,
   SUPPLY_NAME          varchar(200)         not null,
   SUPPLY_DESCN         varchar(400)         null,
   constraint PK_SUPPLIERS primary key  (SUPPLY_NO)
)default charset=utf8;


public class Suppliers {
	private String supplyNo;
	private String supplyName;
	private String supplyDescn;
	private Set<Products> pros=new HashSet<Products>();

	public Suppliers() {
	}
	
	....
	相关get set constructor方法
}


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
  "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
	<class name="com.yunfeic.test.entity.Suppliers" table="suppliers">
		<id name="supplyNo" type="java.lang.String">
			<column name="supply_no" />
			<generator class="uuid" />
		</id>
		<property name="supplyName" type="java.lang.String">
			<column name="supply_name" />
		</property>
		<property name="supplyDescn" type="java.lang.String">
			<column name="supply_descn" />
		</property>
		<!-- 供应商与产品 多对多 供应商来级联, 产品来维护关系-->
		<set name="pros" table="product_supply" cascade="save-update" inverse="true">
			<key column="supply_no"></key>
			<many-to-many class="com.yunfeic.test.entity.Products"
				column="product_no" />
		</set>
	</class>
</hibernate-mapping>
###################################################################################
看一下代码即可学会many-to-many
		//一次添加2个学生与2个老师
//		Student s1 = new Student();
//		s1.setSname("王五");
//		Student s2 = new Student();
//		s2.setSname("张三");
//		
//		Teacher t1 = new Teacher();
//		t1.setTname("王五2");
//		Teacher t2 = new Teacher();
//		t2.setTname("张三2");
//		
//		//相互设置关系
//		//学生添加老师
//		s1.getTeachers().add(t1);
//		s1.getTeachers().add(t2);
//		s2.getTeachers().add(t1);
//		s2.getTeachers().add(t2);
//		
//		//老师添加学生
//		t1.getStudents().add(s1);
//		t1.getStudents().add(s2);
//		t2.getStudents().add(s1);
//		t2.getStudents().add(s2);
//		
//		
//		session.save(s1);
//		session.save(s2);
		
		//删除学号为1的学生
//		Student student = (Student)session.get(Student.class, 1L);
//		//删除学生表
//		session.delete(student);
//		//删除关系表中的关系
//		Set<Teacher> teachers = student.getTeachers();
//		for (Teacher teacher : teachers) {
//			teacher.getStudents().remove(student);
//		}
		
		//新来一个老师，也教2号学生
//		Student student = (Student)session.get(Student.class, 2L);
//		Teacher t = new Teacher();
//		t.setTname("王五");
//		t.getStudents().add(student);
//		session.save(t);


		//3号老师不教2号学生了
//		Student student = (Student)session.get(Student.class, 2L);
//		Teacher teacher = (Teacher)session.get(Teacher.class, 3L);
//		teacher.getStudents().remove(student);
		
		
		
		//2号老师辞职
//		Teacher teacher = (Teacher)session.get(Teacher.class, 2L);
//		teacher.setStudents(null);
//		session.delete(teacher);

   	