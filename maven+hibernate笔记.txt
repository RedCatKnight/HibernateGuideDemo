										maven + hikariCP + Hibernate使用教程
环境: 
	Maven 3.5.0
   	jdk 1.8.0_92 
   	hikariCP 2.4.13
	hibernate 4.3.11.Final  
   	eclipse Mars.2 Release (4.5.2)以上
   	apache-tomcat-8.0.46
   	mariadb数据库
  
hibernate是orm框架,是持久化层框架,专门与数据库打交道. 它将数据库操作转化为对象之间的操作. 那么如何搭建表与对象的桥梁呢? 就是
在应用程序启动时,加载配置文件,告诉框架表与对象的关系. 具体说来,
第一, 每一个表对应一个实体类,通过一个映射文件描述它们之间的关系;
第二, 映射文件中,通过对象与对象的关联来反映了表与表的关联,开发者只需要配好对象间的映射关系;
第三, 映射文件是根据什么来配置对象与对象的关联呢? 一般通过 主外键/数据库中建立的关系表,
比如在一对一中,在双方的类中添加对方的实体对象,一方的主键通过外键生成,即在映射文件中配置id是,仿照一下
Person与Card
<id name="cid" type="java.lang.Long">
            <column name="CID" />
            <generator class="foreign">
            	<param name="property">person</param>
            </generator>
        </id>

下面通过一个demo来讲解:
   	
1. 首先, eclipse创建一个maven项目
2. 配置pom,并在src/main/resources/下配置hibernate.cfg.xml,编写数据库连接信息的配置,以及加载对象与表的映射文件
3. 创建一个test database,创建CATERIES, PRODUCTS, SUPPLIERS, PRODUCT_SUPPLY表
4. 在src/main/resources/下建立entity_mappings文件夹,在entity_mappings里
编写对象与表的映射文件: 类名.hbm.xml ,如Products.hbm.xml. 
5. 在映射文件中配置对象与表的关系,及对象与对象的映射关系. 例如: CATERIES与PRODUCTS一对多映射关系, 
PRODUCTS与SUPPLIERS多对多映射关系,其中PRODUCT_SUPPLY是关系表,不需要单独另建配置文件


######################################对象状态与加载策略#####################################

第一点： Hibernate 连接数据库流程
//1.加载配置文件,获得连接对象工厂
StandardServiceRegistryBuilder registryBuilder = new StandardServiceRegistryBuilder();
Configuration config = new Configuration();
URL url = SessionFactoryUtil.class.getClassLoader().getResource("hibernate.cfg.xml");
config.configure(url);
registryBuilder.applySettings(config.getProperties());
serviceRegistry = registryBuilder.build();
sessionFactory = config.buildSessionFactory(serviceRegistry);

//2.获得一个连接
Session session = sessionFactory.openSession();

//3.开启一个事务
Transaction trans = session.beginTransaction();
		
//4.执行增删改查
调用session	save/update/delete／createQuery/	createCriteria等等方法，
如果只执行查询可以不开启事务；

//5.提交事务，会将session中所有持久化对象改动都写入数据库
trans.commit();	

//6.关闭连接
session.close();


第二点： 总结session 的get/load 方法
1，get()方法和load()方法基本上是相同的,都是从数据库中取数据，但有两点不同：
    A，当我们从数据库中取的数据不存在时，get()方法会返回一个null
	   而load()方法则会直接抛异常（则报错）
    B，当我们取到数据后，get()方法会将所有的数据都取出来，(即时加载)
 	   而load()方法则只会把主键取出来 (称为延时加载/懒加载--lazyinit)
 	   所以当session关闭后，get方法获得的对象可以取得该对象除主键之外的属性,
 	   load方法只能得到主键;
2，update()方法和merge()方法也基本上是相同的，都是更新数据,但也还是有不同的：
     当有两个相同的对象同时处于持久态的时候，我们对其中的某一对象进行update的时候，
	   update()方法会报错误
	   而merge()方法则会将两个合并为一个，当只有一个的话merge()方法也会去数据库中查一个相同的出来再进行合并
3，saveOrUpdate()的意思是：当数据库中存在该主键就update,否则就save


第三点： 对象三种状态
自由态（新建态）：在数据库中是不会存在该对象的，当我们使用session.delete()方法可使对象变为自由态
持久态（托管态）：则数据是处于了持久的内存中的，数据库中有数据的，当我们改变处于持久态的对象时，数据库中的也会改变
		  可以变为持久态的方法是：get(),load(),save(),update(),saveOrUpdate(),merge(),(一级缓存)
游离态：数据库中有可能存在的数据，通过session的close(),clear(),evict(Object)三个方法可以将一个持久态的对象变为一个
	游离态的对象

1. session关联对象 可以类似理解为 session的内存空间持有了该对象的引用;
在这里，所谓的同一个对象是指两个对象都是同一个主键id，对应数据库同一条记录;
2. 当对象是通过session得到的，session就关联了这个对象，这个对象就处于持久态;
3. 当session对一个新建态对象(比如，new Cateries())操作时，会先关联这个对象，使其处于持久态,但如果
session已经关联了同一个对象,会报错(比如，先查询所有，在添加已存在的主键ID对象);
例如
Cateries Cateries1=new Cateries("洗衣机","");
Cateries1.setCateryId(4);
Cateries c=(Cateries) session.get(Cateries.class, 4);
session.save(Cateries1);

报错org.hibernate.NonUniqueObjectException: A different object with the same identifier value was 
already associated with the session : [com.yunfeic.test.entity.Cateries#4]


4. 持久态的对象与数据库记录对应，已经处于持久态的对象不允许改主键，否则hibernate框架不知你到底要干嘛, 报错，例如
Cateries cateries = (Cateries) session.get(Cateries.class, 3);
cateries.setCateryId(2);

报错
org.hibernate.HibernateException: identifier of an instance of com.yunfeic.test.entity.Cateries was altered from 3 to 2


5. 提交事务，会将session中所有持久化对象改动都写入数据库，非持久化状态的对象的改动不会写入数据库;

6. 重复保存持久态的对象,只会执行一次插入语句;


第四点:
当我们使用批量插入到数据库中的时候：我们要通过把对象放到游离状态来完成，因为持久状态的内存并不大，当数据过多会造成内存溢出
例如：
	for(int i=0;i<10000000;i++){
		if(i%50==0){
			session.clear(); //当有了50个就放入游离状态
		}
		session.save(object);
	}


################################主键策略###################################
identity:
适合数据库自动增长的主键
不适合oracle数据库

native:
是告诉框架由数据库自己搞定
如果操作的是oracle数据库
那么会自动去找一个叫hibernate_sequence的序列

increment:(由框架生成.性能，并发)
是由框架先去查询数据库的表的最大值
然后再自动生成主键


sequence:
oracle数据库独有的生成方式
生成的也是一个数字


assigned:
是由程序员自己手动指定
适合任意类型的主键


uuid:(强烈推荐)
是由框架自动根据mac地址与时间点生成
一个32位的字符串，作为主键


foreign:(表示表的主键由外部给予)
一般来说我们采用的一对一的方式会用该配置
一对一：
1：在双方的类中添加对方的实体对象
2：在配置中采用<one-to-one>来配置该添加的属性

一对一采用的加载策略是即时加载






以下是"类名.hbm.xml"文件中的配置讲解:

实体类类名对应表名;
实体类的属性对应表中字段;
实体类中必须定义空的构造方法,无参数,无方法体;

例如实体类 Products.java , 映射文件 Products.hbm.xml
实体类 Cateries.java , 映射文件 Cateries.hbm.xml

####################################################################################
create table PRODUCTS (
   PRODUCT_NO           varchar(10)          not null,
   CATERY_ID          int               not null,
   PRODUCT_NAME         varchar(300)         not null,
   PRODUCT_PRICE        float                not null,
   PHOTO_PATH           varchar(100)         null,
   PRODUCT_DESCN        varchar(2000)        null,
   constraint PK_PRODUCTS primary key  (PRODUCT_NO)
)default charset=utf8;


public class Products {
	private String productNo;
	private String productName;
	private float productPrice;
	private String photoPath;
	private String productDescn;
	
	//private int cateryId; 
	private Cateries catery; 
	/*
	注释属性 cateryId,使用 private Cateries catery 替代
	cateryId 对应字段 catery_id ,
	*/
	
	private Set<Suppliers> supplys;
	
	public Products(){}
	....
	相关get set constructor方法
}


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
  "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
	<class name="com.yunfeic.test.entity.Products" table="products">
		<id name="productNo" type="java.lang.String">
			<column name="product_no" />
			<generator class="uuid" />
		</id>
		<property name="productName" type="java.lang.String">
			<column name="product_name" />
		</property>
		<property name="productPrice" type="java.lang.Float">
			<column name="product_price" />
		</property>
		<property name="photoPath" type="java.lang.String">
			<column name="photo_path" />
		</property>
		<property name="productDescn" type="java.lang.String">
			<column name="product_descn" />
		</property>
		
		<!-- 类别与产品 一对多 -->
		<many-to-one name="catery" class="com.yunfeic.test.entity.Cateries"
			column="catery_id"></many-to-one>
		
		<!-- 产品与供应商 多对多 -->
		<set name="supplys" table="product_supply">
		    <key column="product_no"/>
		    <many-to-many class="com.yunfeic.test.entity.Suppliers" column="supply_no"/>
		</set>
		
	</class>
</hibernate-mapping>

------------------------------------------------------------------------------------------------------------ 

create table CATERIES (
   CATERY_ID int,
   CATERY_NAME varchar(100) not null,
   CATERY_DESCN varchar(500),
   constraint PK_CATERIES primary key  (CATERY_ID)
)default charset=utf8;


 public class Cateries {
	private int cateryId;
	private String cateryName;
	private String cateryDescn;
	
	private Set<Products> pros;
	
	public Cateries() {}
	
	....
	相关get set constructor方法
	
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
  "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
 <hibernate-mapping>
 <class name="com.yunfeic.test.entity.Cateries" table="cateries">
 <id name="cateryId" type="java.lang.Integer">
 <column name="catery_id"/>
 <generator class="increment"/>
 </id>
 <property name="cateryName" type="java.lang.String">
 <column name="catery_name"/>
 </property>
 <property name="cateryDescn" type="java.lang.String" column="catery_descn"></property>
 <!-- 类别与产品 一对多 类别来级联, 产品来维护关系-->
 <set name="pros" table="products" cascade="all" inverse="true">
     <key column="catery_id"></key>
     <one-to-many class="com.yunfeic.test.entity.Products"/>
 </set>
 </class>
 </hibernate-mapping>
 
------------------------------------------------------------------------------------------------------------

 create table PRODUCT_SUPPLY (
   SUPPLY_NO            varchar(10)          null,
   PRODUCT_NO           varchar(10)          null
)default charset=utf8;

create table SUPPLIERS (
   SUPPLY_NO            varchar(10)          not null,
   SUPPLY_NAME          varchar(200)         not null,
   SUPPLY_DESCN         varchar(400)         null,
   constraint PK_SUPPLIERS primary key  (SUPPLY_NO)
)default charset=utf8;


public class Suppliers {
	private String supplyNo;
	private String supplyName;
	private String supplyDescn;
	private Set<Products> pros;

	public Suppliers() {
	}
	
	....
	相关get set constructor方法
}


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
  "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
	<class name="com.yunfeic.test.entity.Suppliers" table="suppliers">
		<id name="supplyNo" type="java.lang.String">
			<column name="supply_no" />
			<generator class="uuid" />
		</id>
		<property name="supplyName" type="java.lang.String">
			<column name="supply_name" />
		</property>
		<property name="supplyDescn" type="java.lang.String">
			<column name="supply_descn" />
		</property>
		<!-- 供应商与产品 多对多 供应商来级联, 产品来维护关系-->
		<set name="pros" table="product_supply" cascade="save-update" inverse="true">
			<key column="supply_no"></key>
			<many-to-many class="com.yunfeic.test.entity.Products"
				column="product_no" />
		</set>
	</class>
</hibernate-mapping>
####################################################################################

Hibernate映射关系有 一对一, 一对多, 多对一, 多对多, 以及组合关系(一个对象有其他几个对象组合而成,比如一个汽车有多个零部件拼装成的), 继承关系;
最重要是前四种;

1. one-to-one


2. one-to-many
多方java类中去掉指向一方的属性id,也就是外键,改为private 一方类名 变量名
以上面的例子为例(Cateries对应多个Products)
(1). Products类,





   	